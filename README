The code is a part of excersize with confidential problem statement and you agree to be reading/evaluating it under right autherization.
=====================

src: contains all the java sources
bin: contains all the executables (created/tested on Linux based system)
build: contains all the compiled bytecode.
lib: contains libraries required to compile/execute the code

TO COMPILE:
use bin/compile.sh
***Dont forget to update variables like CODE_HOME and JDK_HOME

TO RUN:
use bin/run.sh
***Dont forget to update variables like CODE_HOME and JRE_HOME

The code has been tested with java 8 and java 10 using Ubuntu based operating system.

================-==============
DISCLOSURE:
1. Though I kind of understood what was required and what needs to be done, The dynamic views in JSON was something that I never encountered before. All my encounters had a static schema so, I hope I did not misunderstood parsing.
2. I am a little less confident when it comes to "front end technologies and terminogies", which may or may not have been the overall context of the problem but I may have misunderstood compund queries (selectables).
3. To me it fealt like PROCESSING everything at once is easier approach and thats why I took it, I never validated the idea of lazy parsing based on user input.

==============================
APPROACH:
Step 1: Getch Json from URL
Step 2: Parse Json String into Java POJOs.
	
	The POJOs were initially created using the provided Json using jsonschematopojo.org, However multiple modifications were done like creating a separate abstract SubView and combining multiple SubViews generated by tool into one single SubView.

Step 3: Traverse the Json Pojos and populate following map
		a) map (class -> list of matching views belonging to this class
		b) map (classname -> list of matching views belongting to this classname)
		c) map (identifier -> list of matching views that contains this identifier)
			Special consideration was provided for ContentView and Contol selectables.

Step 4: Keep taking user input and find right list of the map. Sneaky stuffs were done to incorporate compund searches.


